%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Acrobat Distiller, Job 4)
%%Version: 1 2
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030613210611)
%%For: (leboudec)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 7 21 808 525
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments

7 21 moveto
808 21 lineto
808 525 lineto
7 525 lineto
closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: l2check
%%Copyright: Copyright 1993 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show
72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 86 dict dup begin put
/_save 0 def
/_cshow 0 def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_lp /none def
/_doClip 0 def
/sfc 0 def
/_sfcs 0 def
/_sfc 0 def
/ssc 0 def
/_sscs 0 def
/_ssc 0 def
/_fcs 0 def
/_scs 0 def
/_fp 0 def
/_sp 0 def
/AGM_MAX_CS_COMPONENTS 10 def
/_fillColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_strokeColors [ 0 1 AGM_MAX_CS_COMPONENTS { array } for ] def
/_fc null def
/_sc null def
/DefaultGray [/DeviceGray] def
/DefaultRGB [/DeviceRGB] def
/DefaultCMYK [/DeviceCMYK] def
/_inT false def
/_tr -1 def
/_rise 0 def
/_ax 0 def
/_cx 0 def
/_ld 0 def
/_tm matrix def
/_ctm matrix def
/_mtx matrix def
/_hy (-) def
/_fScl 0 def
/_hs 1 def
/_pdfEncodings 2 array def
/_baselineadj 0 def
/_fTzero false def
/_Tj 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_op? false def
/_OP? false def
/_opmode 0 def
/_ColorSep5044? false def
/_tmpcolr? [] def
/_tmpop? {} def
/_processColors 0 def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
/StartLoad { dup dup not { /_save save dd } if } bd
/EndLoad { if not { _save restore } if } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 4.0 3
%%Copyright: Copyright 1998-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
[/b/B/b*/B*/BDC/BI/BMC/BT/BX/c/cm/cs/CS/d/d0/d1/Do/DP/EI/EMC/ET/EX/f/f*/g/G/gs
/h/i/j/J/k/K/l/m/M/MP/n/q/Q/re/rg/RG/ri/s/S/sc/SC/scn/SCN/sg/Tc/Td/TD/Tf/Tj/TJ
/TL/Tm/Tr/Ts/Tw/Tz/T*/v/w/W/W*/y/'/"
/applyInterpFunc/applystitchFunc/domainClip/EF/encodeInput/gsDI/ilp/icl
/initgs/int/limit/PS/rangeClip/RC/rf/makePat/csfamily 
/? /! /| /: /+ /GetGlyphDirectory
] {null def} bind forall
/v { currentpoint 6 2 roll c } bd
/y { 2 copy c } bd
/h/closepath ld
/d/setdash ld
/j/setlinejoin ld
/J/setlinecap ld
/M/setmiterlimit ld
/w/setlinewidth ld
/i {
dup 0 eq { pop _defaultflatness } if
setflat
} bd
/gsDI {
begin
/OP here { /_OP? xdd } if
/op here { /_op? xdd }
{ /OP here { /_op? xdd } if }
ifelse
/OPM here { /_opmode xdd } if
/Font here { aload pop Tf } if
/LW here { w } if
/LC here { J } if
/LJ here { j } if
/ML here { M } if
/D here { aload pop d } if
end
} bd
/ilp { /_lp /none dd } bd
/icl { /_doClip 0 dd } bd
/W { /_doClip 1 dd } bd
/W* { /_doClip 2 dd } bd
/n {
{{} {clip} {eoclip}} _doClip get exec
icl
newpath
} bd
/s { h S } bd
/B { q f Q S } bd
/B* { q f* Q S } bd
/b { h B } bd
/b* { h B* } bd
/q/save ld
/Q { restore ilp } bd
/GetCSFamily {
dup type /arraytype eq {0 get} if
} bd
/GetCompsDict
11 dict begin
/DeviceGray { pop 1 } bd
/DeviceRGB { pop 3 } bd
/DeviceCMYK { pop 4 } bd
/CIEBasedA { pop 1 } bd
/CIEBasedABC { pop 3 } bd
/CIEBasedDEF { pop 3 } bd
/CIEBasedDEFG { pop 4 } bd
/DeviceN { 1 get length } bd
/Separation { pop 1 } bd
/Indexed { pop 1 } bd
/Pattern { pop 0 } bd
currentdict
end
def
/GetComps {
GetCompsDict
1 index GetCSFamily
get exec
} bd
/cs
{
dup _fcs eq
{ pop }
{ dup /_fcs xdd
GetComps
_fillColors exch get
/_fc xdd
/_fp null dd
} ifelse
} bd
/CS
{
dup _scs eq
{ pop }
{ dup /_scs xdd GetComps _strokeColors exch get /_sc xdd /_sp null dd }
ifelse
} bd
/sc {
_fc astore pop
ilp
} bd
/SC {
_sc astore pop
ilp
} bd
/g { DefaultGray cs sc } bd
/rg { DefaultRGB cs sc } bd
/k { DefaultCMYK cs sc } bd
/G { DefaultGray CS SC } bd
/RG { DefaultRGB CS SC } bd
/K { DefaultCMYK CS SC } bd
/cm { _mtx astore concat } bd
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/RC/rectclip ld
/EF/execform ld
/PS { cvx exec } bd
/initgs {
/DefaultGray [/DeviceGray] dd
/DefaultRGB [/DeviceRGB] dd
/DefaultCMYK [/DeviceCMYK] dd
0 g 0 G
[] 0 d
0 j
0 J
10 M
1 w
true setSA
/_op? false dd
/_OP? false dd
/_opmode 0 dd
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
%%EndResource
%%BeginResource: procset pdflev2
%%Version: 4.0 5
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 2
%%Title: PDF operators, with code specific for Level 2
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/initialize {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
false setoverprint
<</MaxFormItem 0>> setuserparams
} bd
/terminate { } bd
/m/moveto ld
/l/lineto ld
/c/curveto ld
/setSA/setstrokeadjust ld
/defineRes/defineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/_sfcs {_fcs setcolorspace} bind dd
/_sscs {_scs setcolorspace} bind dd
/_sfc
{
_fc aload pop
_fp null eq
{ setcolor }
{ _fp setpattern }
ifelse
} bind dd
/_ssc
{
_sc aload pop
_sp null eq { setcolor} { _sp setpattern } ifelse
} bind dd
/scn {
dup type /dicttype eq
{ dup /_fp xdd
/PaintType get 1 eq
{ /_fc _fillColors 0 get dd ilp }
{ /_fc _fillColors
_fcs 1 get
GetComps get dd
sc
}
ifelse
}
{ sc }
ifelse
} bd
/SCN {
dup type /dicttype eq
{ dup /_sp xdd
/PaintType get 1 eq
{ /_sc _strokeColors 0 get dd ilp }
{ /_sc _strokeColors _scs 1 get GetComps get dd
SC
}
ifelse
}
{ SC }
ifelse
} bd
/gs
{
begin
/SA here { setstrokeadjust } if
/BG here { setblackgeneration } if
/UCR here { setundercolorremoval } if
/FL here { i } if
/RI here { ri } if
/TR here
{
dup xcheck
{ settransfer }
{ aload pop setcolortransfer }
ifelse
} if
/sethalftonephase isdefined? { /HTP here { sethalftonephase } if } if
/HT here { sethalftone } if
currentdict gsDI
end
} bd
/sfc {
_op? setoverprint
_lp /fill ne {
_sfcs
_sfc
/_lp /fill dd
} if
} dd
/ssc {
_OP? setoverprint
_lp /stroke ne {
_sscs
_ssc
/_lp /stroke dd
} if
} dd
/f {
{ { sfc fill }
{gsave sfc fill grestore clip newpath icl ilp}
{gsave sfc fill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/f* {
{ { sfc eofill }
{gsave sfc eofill grestore clip newpath icl ilp}
{gsave sfc eofill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/S {
{ { ssc stroke }
{gsave ssc stroke grestore clip newpath icl ilp}
{gsave ssc stroke grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/rf {
{ { sfc rectfill }
{gsave sfc rectfill grestore clip newpath icl ilp}
{gsave sfc rectfill grestore eoclip newpath icl ilp}
} _doClip get exec
} bd
/knownColorants? {
pop false
} bd
/makePat {
gsave
dup /Matrix get concat
matrix makepattern
grestore
/MadePattern defineRes pop
} bd
%%EndResource
%%BeginResource: procset spots
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Predefined (named) spot functions for PDF
21 dict dup begin
/CosineDot
{ 180 mul cos exch 180 mul cos add 2 div } bd
/Cross
{ abs exch abs 2 copy gt { exch } if pop neg } bd
/Diamond
{ abs exch abs 2 copy add .75 le
{ dup mul exch dup mul add 1 exch sub }
{ 2 copy add 1.23 le
{ .85 mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse }
ifelse } bd
/Double
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add } bd
/DoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add } bd
/Ellipse
{ abs exch abs 2 copy 3 mul exch 4 mul add 3 sub dup 0 lt
{ pop dup mul exch .75 div dup mul add 4 div
1 exch sub }
{ dup 1 gt
{pop 1 exch sub dup mul exch 1 exch sub
.75 div dup mul add 4 div 1 sub }
{ .5 exch sub exch pop exch pop }
ifelse }
ifelse } bd
/EllipseA
{ dup mul .9 mul exch dup mul add 1 exch sub } bd
/EllipseB
{ dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub } bd
/EllipseC
{ dup mul exch dup mul .9 mul add 1 exch sub } bd
/InvertedDouble
{ exch 2 div exch 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedDoubleDot
{ 2 { 360 mul sin 2 div exch } repeat add neg } bd
/InvertedEllipseA
{ dup mul .9 mul exch dup mul add 1 sub } bd
/InvertedEllipseC
{ dup mul exch dup mul .9 mul add 1 sub } bd
/InvertedSimpleDot
{ dup mul exch dup mul add 1 sub } bd
/Line
{ exch pop abs neg } bd
/LineX
{ pop } bd
/LineY
{ exch pop } bd
/Rhomboid
{ abs exch abs 0.9 mul add 2 div } bd
/Round
{ abs exch abs 2 copy add 1 le
{ dup mul exch dup mul add 1 exch sub }
{ 1 sub dup mul exch 1 sub dup mul add 1 sub }
ifelse } bd
/SimpleDot
{ dup mul exch dup mul add 1 exch sub } bd
/Square
{ abs exch abs 2 copy lt { exch } if pop neg } bd
end
{ /Function defineRes pop } forall
%%EndResource
%%BeginResource: procset pdftext
%%Version: 4.0 2
%%Copyright: Copyright 1987-1998 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 75 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
/_intT false dd
0 Tr
} bd
/terminate { end } bd
/_safeput
{
Level2? not
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
}
if
3 -1 roll load 3 1 roll put
}
bd
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
FontName currentdict
end
definefont pop
}
bd
/Level2?
systemdict /languagelevel known
{systemdict /languagelevel get 2 ge}
{false}
ifelse
def
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category resourcestatus
{
pop pop
/CIDFont resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckSupplements
{
1 index _pdfTextTempString cvs
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
{
/CIDFont findresource
/CIDSystemInfo get /Supplement get
exch /CMap findresource
/CIDSystemInfo get
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ pop pop true }
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckSupplements
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_fyAdj xdd
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
_fyAdj 0 ne or
{
exch _wmode _pdfConcatNames _fyAdj _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
/BaseLineAdj _fyAdj def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
/swj {
dup 4 1 roll
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
6 2 roll /_cnt 0 dd
{1 index eq {/_cnt _cnt 1 add dd} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} bd
/jss {
4 1 roll
{
pop pop
(0) exch 2 copy 0 exch put
gsave
exch false charpath currentpoint
5 index setmatrix stroke
3 -1 roll
32 eq
{
moveto
5 index 5 index rmoveto currentpoint
}
if
grestore
moveto
2 copy rmoveto
} exch cshow
6 {pop} repeat
} def
/jsfTzero {
{
pop pop
(0) exch 2 copy 0 exch put
exch show
32 eq
{
4 index 4 index rmoveto
}
if
2 copy rmoveto
} exch cshow
5 {pop} repeat
} def
/jsp
{
{
pop pop
(0) exch 2 copy 0 exch put
32 eq
dup {currentfont /Encoding get dup length 33 ge 
{32 get /space eq and}{pop}ifelse
}if
{ exch 5 index 5 index 5 index 5 -1 roll widthshow }
{ false charpath }
ifelse
2 copy rmoveto
} exch cshow
5 {pop} repeat
} bd
/trj { _cx 0 fWModeProc 32 _ax 0 fWModeProc 6 5 roll } bd
/pjsf { trj sfc fawidthshowProc } bd
/pjss { trj _ctm ssc jss } bd
/pjsc { trj jsp } bd
/_Tjdef [
/pjsf load
/pjss load
{
dup
currentpoint 3 2 roll
pjsf
newpath moveto
pjss
} bind
{
trj swj rmoveto
} bind
{
dup currentpoint 4 2 roll gsave
pjsf
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll
currentpoint gsave newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
{
dup currentpoint 4 2 roll gsave
dup currentpoint 3 2 roll
pjsf
newpath moveto
pjss
grestore 3 1 roll moveto
pjsc
} bind
/pjsc load
] def
/BT
{
/_inT true dd
_ctm currentmatrix pop matrix _tm copy pop
0 _rise _baselineadj add translate _hs 1 scale
0 0 moveto
} bd
/ET
{
/_inT false dd
_tr 3 gt {clip} if
_ctm setmatrix newpath
} bd
/Tr {
_inT { _tr 3 le {currentpoint newpath moveto} if } if
dup /_tr xdd
_Tjdef exch get /_Tj xdd
} bd
/Tj {
userdict /$$copystring 2 index put
_Tj
} bd
/iTm { _ctm setmatrix _tm concat 0 _rise _baselineadj add translate _hs 1 scale } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/Td { _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto } bd
/TD { dup /_ld xdd Td } bd
/_nullProc {} bd
/Tf {
dup 1000 div /_fScl xdd
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
Level2?
{ selectfont }
{ exch findfont exch scalefont setfont}
ifelse
currentfont dup
/_nullProc exch
/WMode known
{
1 index /WMode get 1 eq
{pop /exch}
if
}
if
load /fWModeProc xdd
dup
/FontType get 0 eq dup _cx 0 ne and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
/_fTzero xdd
dup /BaseLineAdj known
{ dup /BaseLineAdj get _fScl mul }
{ 0 }
ifelse
/_baselineadj xdd
dup /_pdfT3Font known
{ 0 }
{_tr}
ifelse
_Tjdef exch get /_Tj xdd
_intT
{currentpoint iTm moveto}
if
pop
} bd
/TL { neg /_ld xdd } bd
/Tw {
/_cx xdd
_cx 0 ne _fTzero and
{ /jsfTzero }
{ /awidthshow }
ifelse
load /fawidthshowProc xdd
} bd
/Tc { /_ax xdd } bd
/Ts { /_rise xdd currentpoint iTm moveto } bd
/Tz { 100 div /_hs xdd iTm } bd
/Tk { exch pop _fScl mul neg 0 fWModeProc rmoveto } bd
/T* { 0 _ld Td } bd
/' { T* Tj } bd
/" { exch Tc exch Tw ' } bd
/TJ {
{
dup type /stringtype eq
{ Tj }
{ 0 exch Tk }
ifelse
} forall
} bd
/T- { _hy Tj } bd
/d0/setcharwidth ld
/d1 { setcachedevice /sfc{}dd /ssc{}dd } bd
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap resourcestatus
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[ PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%BeginResource: font EOPKJE+ComicSansMS
11 dict begin
/FontName /EOPKJE+ComicSansMS def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/lenIV -1 def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 256 dict dup begin
/.notdef 4 RD 
8b8b0d0e ND 
/g0 39 RD 
caf8880df80b16f9b407fc0b06fdb407f80b0609fbccf97515f78d06fd36
07fb8d06f93607090e ND 
/g3 5 RD 
8bf7bf0d0e ND 
/g11 128 RD 
c3f8020df7a3f99615829481907f8b08848b81867e8208495e5842632608
683279318b33088bfb8ad0fb35f71e3e0898849787958b08968b958f9393
0894938f948b96088b9a829a789a087b967c977c970841d765f70e8bf739
088bcc94cc9dcd089fd7a7c5afb4089b9c99999a9a089fa0959c8b96088b
988795829408090e ND 
/g12 131 RD 
c3f8020df77bf8bc1563ef57d44ab8087d95818f848b087e8b8186828208
848286808b7f088b81957a9f75089a7c9a7c9a7c08af62a851a03f089b47
954b8b4b088bfb3b65fb0d403e087c817c7f7c7f08777b827d8b7c088b80
8f8294830893839587968b08958b968f989208f721d9cff7358bf789088b
e279e567e5088c8c05090e ND 
/g14 187 RD 
a2f8740df7ebf7fc15858b818b7e8a087c8a828b858b08668c05c3078a91
8c948c97088d978b948b91088b9687968293088393808f7f8b08808b8388
84850883868782887f08877f8a778b6d08520764896f8a7b8b08708a7b8b
8589087986827e8b76086ca47cbd1e9c8ca68cb28d088d52058a53058d7c
8e8092840892849687998b08a9999aa81ff70707988a9b8b9f8c08bb8c05
908b918a938a08928a918a8f8b08978b958f93940893958f958b9708aa70
9a561e8b06090e ND 
/g15 75 RD 
ecf7a90dd9fb2215b9f3a2c38b93088b958796839408829381907f8b087e
8b7f83837b08817b7e6e796308775b81708b82088b7e8f82938208958394
86968b089c8b9694939d088a07090e ND 
/g16 57 RD 
c1f8350df7d0f7a215a47d986e1e708b658a5889085788658a718b08707d
7e721f72997ea61ef7058bda8db79008a68e97988ba1088b06090e ND 
/g18 103 RD 
b4f8940de07b15e3f75805f6f75e05b3dbaad0a1c708c2f719058e958d94
8b93088b9686958293088394808f7f8b08748d6b5160fb090873455a2645
fb180845fb175b2672450888858a868b86088b7d90829483089383968797
8b089d8a9895949e088b06090e ND 
/g20 203 RD 
d8f8560df7c1981594948f968b99088b9887968294088195808f7d8b0858
8a058b9c8aa189a60886a78ba28b9e088bae8fc393d40892d58fc28bb008
8b968b9b8aa10889a18b9b8b96088b928c978d9a088c988c978b9208a580
97751e728b6f7d6f6e086b6f72787a7f086f737d798b7c088b7f907f9581
0893839785988b08978ba79cb6ad088b60884c8438088437874c8b62088b
7c8c748e6c088e6d8c748b7b08778c05748c05578a727b8b6a088b78937f
9c850894889b8aa28b08eb06ed0698899790949408090e ND 
/g32 152 RD 
bbf8920db4f87a1570857d7d8b74088b7e8f8193830893819588988b0892
8a968c9a8c089a8b968c928b08f77906a78a9a9a8ba808a87d996e1efb79
06668d73898489088c070991fb9c156f887d7c8b7008709a7ba91e948c9a
8b9f8c089d8d9a8b958b08a18cab8ab68a08b68aab8ba08b08a98a999a8b
a808a87d996e1e758c6b8b608c08608c6b8b768b08718c6e896788088c07
090e ND 
/g47 139 RD 
bcf8bb0df877cd158b988797839508819580917d8b08858b868a858908fb
1463fb0177368c088aa08ca38ea60891d50594f72b8ff73b8bf74c088b98
869782950882957f907d8b087e8b7f868281088282867f8b7d088bfb4a87
fb3983fb290881fb36058b6795729f7d089881a386ac8b08b98bc691d498
08da98c59ab09c089f9796998ba0088b06090e ND 
/g62 190 RD 
e1f80c0df73ffb5f159e8b998b948b089989959193940892948f968b9808
8b998796839408849480907e8b08838a7c8c788c08788b7d8c828b085f8a
0595f7db058ff7dc058daf89ad8aa808b189ac8ca68e08a78c989c8ba808
aa7c9b6d1e858b828b7f8a087e8a828b858b08828a7c8c778c08788b7c8c
818b087f8b8086838208828188808c7f0889840595fb280589508afb0786
fb3d0886fb3e89fb068b4f0865a078b51e928b968b9a8c08998d968b928b
08958a998b9e8a08090e ND 
/g64 189 RD 
e1f80c0de0fb5f15788b7d8b828b087d898191839408859486968b98088b
998f9693940892949690988b08938a9a8c9e8c089e8b998c948b08b78a05
81f7db0587f7dc0589af8dad8da80864896a8c708e086f8c7e9c8ba808aa
9a9ba91e918b948b978a08988a948b918b08948a9a8c9f8c089e8b9a8c95
8b08988b958693820894818e808a7f088d840581fb28058d508cfb0790fb
3d0890fb3e8dfb068b4f08657678611e848b808b7c8c087e8d7f8b848b08
818a7d8b788a08090e ND 
/g68 225 RD 
a4f8940df85c7815949390968b9808889305869787938991087ab681a888
990884a389ab8bb3088bb78cb08da7088da78da08e970893918e938b9408
8aa575a15f9d08689a6b926f8b083f8b4b6f555308545370488b3c088b38
9b4dac6308af5fc276d78b089b8b9f8fa39408a293a798aa9c089281967f
9a7e089b7c9684918b08988b958f94940809fb09f7181575797b7f7f8508
767e70866c8b08648b6f9878a60879a681b38bc1088bc09dbbb0b408b0b4
b7a0be8b088e8b938a948808938796879785088778897a897b0889798a7c
8b7d088b61904a9535088c8a05090e ND 
/g71 213 RD 
bdf8df0df87af96f15aa7c9b6e1e728b7c7d876e08855b862f87fb1d085b
ad0579966d91658b08418b50715d57085b5675468b34088b43a250b95d08
b65fc374ce8b08a88ba48fa49408a694a298a29c08966e997c9f8b08978b
968f949308939590958b98088b8e8b8f8a900881c186de8bf700088bba8d
bb8fbb0897f72f92ef8bb8088b0609fb36fbe115a07e9b7797710851078a
52058c3705878786858687087275797e80850878817486708b08628b689a
6da9086faa7baf8bb5088bcb99bca6ab08a7acb49bc28b08a68ba484a07e
08090e ND 
/g73 179 RD 
b0f8900df83af97215aa749b5c1e448b56766962086f697956834308866a
89738a79085c8a0553886e7b8b6b086b9b7cac1e9689a48eb48e08fb2207
8cfb19058c5a875d8461088b858a898b88088b7f8f809482089782958798
8b08a58b999891a50893ae8ebb8bc9088b9e8aaa8ab3088ab38aa98b9f08
8ff70305c792b08c9a8b089a8a988c968d08a48f98998ba308ac719b571e
7c8b67895487088aa90597f703b6c2da8b08b589a09c8baa088b06090e ND 
/g76 184 RD 
e2f7ac0df706f90f15969691988b9b088b9a859980960880957d917b8b08
7d8b7d858080087e81867d8b7b088b7c917d968008978198859b8b089a8b
9991969608097efbbf158eb98db18baa08899988978294088195808f7d8b
087d8b7f868282088383867f8b7c088b6c8a65885d08875e8a658b6c088b
778c6e8c64088b658c6d8b77088b7e8f7f94820895819687998b08998b97
90949408939390978b99088ba08ba78ab20889b38ba88b9f088ba78db28e
b908090e ND 
/g80 322 RD 
c6f99d0df92d701594948f968a98087ef7167fe882c30881dc85b8879708
77c666a8558b086a8b6f85727f08737f757979730878bf68a4588b08738b
6f7d6a6f086b6e726c7a68088abe058b938c948d98088b998d948b91088a
98869780960882977f907e8b086a7a66411f8c7a8c718e68088e688c718b
7a088d78886e8764088864896e8b7708389d61b01e998b96909594089693
90978b98088a938a97889d08879d8a988b95088b9e8da78fb1088db18da8
8b9f0898969396909308c4cb05a4a3a29ca29508937891708b69088b638f
51933e08913f90518b64088b7b908094820892829786998b089b8b969094
9408939490978b99088bad88b585be087cf7160589aa8aa98baa0896969f
9aaa9e08aca0a195978b08988b977c966e08937690758e75089dfb2b058f
48925a9167088f6e9b7da68b08998b9790959408090e ND 
/g81 235 RD 
c8f89f0df8337515949490978b99088ba688ad84b60884b788ad8ba608b8
07bc078ac983b77daa0876b967a2578b08518b53675442088ac40587b57b
a06d8b087d8b7f87828208838186808b7d088a818c7b8c77088d768b7c8b
81088b69895d865008864e895d8b6a088b818c7c8d78088d788c7c8b8108
8c7d8f7f94820893819787998b08998b969094940895938f978b9a088b95
8a99899f08899f8a9a8b95088b988c9c8d9b088d9f8d9b8c98089bc5a3be
a9b208acb7aea0b08b08a49968451f8a818b7c8a750889758b7b8b82088b
6b8d678f65089a20058d6c9c7ca78b08998b978f949408090e ND 
/g85 119 RD 
cff8740df810f81e158bb384a97e9f087f9f7795718b083d8b466d4c4f08
8dc17aa66b8b086e7d7b6a1f8b808b7b8a76088a748b7c8b8008fbeb076b
997aa81eab9b9bac1f8af7a0059eb5a3aba8a008aba3b499bf910862078d
7a8b808b85086a997ba71ea98b9b9f8db4088c918b968b9c088b06090e ND 
/g91 195 RD 
a9f8e20df8a8f881158b97869681940882967f8f7e8b087f8b7e83817c08
7b76716e6365082c330535f7090566bd6da4788b087f8b80868281088281
86808b7e088b7c91809780089f7aa170a56608cb2f0523fb010584837c7e
757708777a7d7d827f08837f87828b81088b7d908095810893839785978b
08988b9691959708b0afa7a69e9c08eaed05d729bf48a96808957f968597
8b08998b9590959508959490978b98088b948796839508fb34f76405e3e2
05d1ce05aaa99aa48b9d088b06090e ND 
/g94 224 RD 
8ef8020df734f773159a7092768b7c088b7f8a7b88760888768a7b8b8008
8b6f916c9868089b5f9e75a28b08a68b9c8a9388089c86937d8b76088b76
837e7a840881877a89738b08568b61a96ac70871bd7dc18bc5088b928c99
8e9d088e9d8c988b94088ba67ca36ca1086ca17c9d8b9a088b9c98a0a5a4
08a4a09e999b900899078aec0589ec058bf2abcdcca708a294a090a08b08
9d8b9c879b82089d80957e8b7a088b7a7f8074860875867a8a808b085d86
74688b4b088b7e8c698d57088d568c6a8b7d088b7884757e73087e6f7b7b
798208987d98789774088b06090e ND 
/g96 224 RD 
8ef8020df743f773157c7084768b7c088b7f8c7b8e76088e768c7b8b8008
8b6f856c7e68087b5f7875758b08708b7a8a8488087a86837d8b76088b76
937e9c840895879c89a38b08bf8bb5a9abc708a7bd98c18bc5088b928a99
889d08889d8a988b94088ba69ba3aaa108aaa19b9d8b9a088b9c7ea070a4
0872a077997b900899078cec058eec058bf26bcd4aa70874947690768b08
798b7a877b82087980817e8b7a088b7a9780a28608a0869c8a968b08b886
a2688b4b088b7e8a6989570889568a6a8b7d088b789275987308996f9b7b
9d82087d7d7e787e74088c06090e ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/EOPKJE+ComicSansMS findfont /Encoding get
dup 0 /g0 put
dup 32 /g3 put
dup 40 /g11 put
dup 41 /g12 put
dup 43 /g14 put
dup 44 /g15 put
dup 45 /g16 put
dup 47 /g18 put
dup 49 /g20 put
dup 61 /g32 put
dup 76 /g47 put
dup 91 /g62 put
dup 93 /g64 put
dup 97 /g68 put
dup 100 /g71 put
dup 102 /g73 put
dup 105 /g76 put
dup 109 /g80 put
dup 110 /g81 put
dup 114 /g85 put
dup 120 /g91 put
dup 123 /g94 put
dup 125 /g96 put
pop
%%EndResource
[/N23/EOPKJE+ComicSansMS -1 TZ
%%BeginResource: font EOPKHE+Arial
11 dict begin
/FontName /EOPKHE+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/lenIV -1 def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 256 dict dup begin
/.notdef 4 RD 
8b8b0d0e ND 
/g0 40 RD 
f711f9820df88816f90507fc8806fd0507f8880609fc78f8f515f86806fc
e507fc6806f8e507090e ND 
/g20 52 RD 
f701f8c00df79bf9631552067c6c716b666a08666b606f5a74083607a694
aa9bad9f08af9fa6a0a09f08fcc407e306f96207090e ND 
/g25 211 RD 
b1f8c00df820f9341567aa5d9b538b083e8b4f705e5408594c71268bfb1e
088bfb0fa232b95508ba55c670d48b08b78bb195ada008ad9fa6a99eb208
9eb195b58bb8088bcf76c362b60862b759a0508b086a8b6b836c7b086c7d
7173766b088cd093c39bb2089bb2a1a8a79f089f9ca492a78b08b08ba77e
a372089b7c9672936808e0920586c374b767aa0809fb91fbdc15a6a8ad99
b38b08b38bad7da56f08a56d98658b59088b587e62706d08716d6b7c668b
08708b7492749a0872997aa07ea7087fa784a88ba9088bb999b0a7a80809
0e ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/EOPKHE+Arial findfont /Encoding get
dup 0 /g0 put
dup 49 /g20 put
dup 54 /g25 put
pop
%%EndResource
[/N17/EOPKHE+Arial -1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
7 21 801 504 re W n
[ 0 -1 1 0 -14.485 531.589 ] concat
/N19 [/CIEBasedABC <<
/MatrixLMN [0.412415 0.212646 0.0193329 0.35762 0.715134 
0.119217 0.180511 0.0721893 0.95076 ]
/DecodeLMN [{2.16942 exp}bind dup dup]
/WhitePoint [0.950455 1 1.08905]
>>]/ColorSpace defineRes pop
/N26 currentfile /ASCII85Decode filter /LZWDecode filter 512 string
%%BeginData: 807 ASCII Bytes
{readstring pop} bind exec
J04gt"9J]-JO#lY80efV#(o48!/O#e'FKO\Tn(3p1)pdZ6_XSeKL-psM+"(h8>K-7
(5kVV!Jn['1`D?CUOgMIE]bD(8#-1m"G0#cO[u:"8L0Hm-Bh#t!f9=><%=/*V1Qg"
Z<T#K9;VdtKYh7TR7sK18YjdN2OdF=",XtUF?5sfVh<+PnpEWn:T+C'"Tj?DThq\@
8gP+/7\`h["H#VlPY.cMWJ&E*17V+;;lU!.KgMS5WDomO8u5Fe<i]6$"cC9.Zs'S4
X+e^XEkG_^=0)T6"bO[%Yun)^9-obFB!YXB#)bpEe7uBpXbP#1ZJ9?,>HS2=Ku2nk
\Ql:m9;U)'G.V%`#E-R\oQn2WYD:<_o)*rDQf\9u?l0(RJmarm&;4I/7MpkgQt@Is
@MjhJMIMsM0T9KY`]/ugR-$YqA/PSBP%9t-:m>N/7TbsfR:]ioAf6>:RV%tbE1CPY
`d"(fRHB$mBGq)2U1fuBOJHS/7[U&eRV&4kC)Vi*WbS!"YcMUY`ji0eRc_DiC`<T"
Z>?!Wd'RX/7bG.dRqCTgDB">o\o+"7n@WZY`q[8dS*'deE#])g_Jl"m&B&Q.7i96c
S7`tcEZBi_b&X#M0[+SXa#M@cSEE/aF<(TWdWD$-:t0V.7p+>bSS)?_Frc?Og30$b
E85XXa*?HbS`bO]GTI*Gicq%BOQ:[.8!rFaSnF_[H6.j?l?]&"Yj?]Xa11PaT'*oY
HliU7npI&Wd.D`.8(dN`T4d*WINO@/qL5'7nGIbXa8#X`TBHO~>
%%EndData
15 dict begin
/Sample exch def
currentdict end
[exch {begin
/_x0 exch def
/_tmp0 _x0
dup 1 ge {pop 255}
{dup 0 le {pop 0}
{255 mul 
} ifelse
} ifelse
def
/min0 _tmp0 cvi def
/max0 _tmp0 ceiling cvi def
/f0
min0 max0 eq
{{min0 f1}}
{{
[min0 f1 max0 f1
0 1 0 {dup 3 index exch get exch 2 index exch get
_tmp0 min0 max0 5 3 roll int
3 1 roll} for pop pop]
}} ifelse
def
/f1
{/prm0 exch def [
 0 255 prm0 limit 16 mul -3 bitshift /byte-offset exch def
0 0 1 1 {byte-offset add Sample exch get exch 8 bitshift or} for
]} def
/rnd {65536 mul 0.5 add floor 65536 div} def
f0 aload pop
dup 65535 ge {pop 1}
{dup 0 le {pop -1}
{2 65535 div mul 1 sub 
} ifelse
} ifelse
rnd
end
} bind aload pop] cvx readonly
/Function defineRes pop
/N25 (\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !"#$%&'\(\)*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\200\201\202\203\204\205\206\207\210\211\
\212\213\214\215\216\217\220\221\222\223\224\225\226\227\230\231\232\233\234\235\236\237\240\241\242\243\244\245\246\247\250\251\252\253\254\255\256\257\260\261\262\263\264\265\266\267\270\271\272\273\274\275\276\277\300\301\302\303\304\305\306\307\310\311\
\312\313\314\315\316\317\320\321\322\323\324\325\326\327\330\331\332\333\334\335\336\337\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356\357\360\361\362\363\364\365\366\367\370\371\372\373\374\375\376\377)15 dict begin
/Sample exch def
currentdict end
[exch {begin
/_x0 exch def
/_tmp0 _x0
dup 1 ge {pop 255}
{dup 0 le {pop 0}
{255 mul 
} ifelse
} ifelse
def
/min0 _tmp0 cvi def
/max0 _tmp0 ceiling cvi def
/f0
min0 max0 eq
{{min0 f1}}
{{
[min0 f1 max0 f1
0 1 0 {dup 3 index exch get exch 2 index exch get
_tmp0 min0 max0 5 3 roll int
3 1 roll} for pop pop]
}} ifelse
def
/f1
{/prm0 exch def [
 0 255 prm0 limit 8 mul -3 bitshift Sample exch get ]} def
/rnd {256 mul 0.5 add floor 256 div} def
f0 aload pop
dup 255 ge {pop 1}
{dup 0 le {pop 0}
{255 div 
} ifelse
} ifelse
rnd
end
} bind aload pop] cvx readonly
/Function defineRes pop
/N27 <<
/SA false 
/OP false 
/BG /N25 /Function findRes 
/UCR /N26 /Function findRes 
/TR {}
/SM 0.02 
>> /ExtGState defineRes pop
/N19 /ColorSpace findRes cs
1 1 1 sc
/N27 /ExtGState findRes gs
1 i
4.92 841.071 585 -840 rf
BT
/N17 1 Tf
0 15.9689 -15.96001 0 582.36 815.0305 Tm
0 0 0 sc
-0.00011 Tc
0 Tw
(61)Tj 
ET
0.918 0.918 0.918 sc
/N19 /ColorSpace findRes CS
0 0 0 SC
1 J
0 j
0.96001 w
10 M
[]0 d
284.39999 225.11099 19.56 153.96001 re
B* 
0.60001 0.60001 0.60001 SC
0 J
1 j
3 w
303.96001 456.11099 m
265.08 456.11099 l
S 
0.60001 0.60001 0.60001 sc
265.44 462.951 m
251.88 456.11099 l
265.44 449.39101 l
f* 
0 0 0 SC
0.96001 w
303.96001 57.11099 m
303.96001 797.87 l
S 
0 0 0 sc
308.28 797.63 m
303.96001 806.03101 l
299.75999 797.63 l
f* 
290.88 379.071 m
316.92 379.071 l
S 
1 0 0 SC
290.88 237.47099 m
316.92 237.47099 l
S 
0 0 0 SC
290.88 456.11099 m
316.92 456.11099 l
S 
BT
/N23 1 Tf
0 27.015 -27 0 333.72 338.1505 Tm
-0.00079 Tc
(f\(n-1\))Tj [-420.8 ]TJ (d\(n-1\))Tj 
1 0 0 sc
-5.5658 0 TD
-0.0004 Tc
(a\(n\))Tj 
ET
1 0 0 SC
3 w
290.75999 239.03101 m
251.88 239.03101 l
S 
290.52 232.311 m
303.96001 239.151 l
290.52 245.871 l
f* 
1 0.537 0.537 sc
0 0 0 SC
1 J
0 j
0.96001 w
134.88 309.11099 19.56 168 re
B* 
1 0 0 SC
0 J
1 j
128.39999 477.11099 m
167.39999 477.11099 l
141.36 520.791 m
167.39999 520.791 l
S 
BT
0 27.015 -27 0 184.2 436.7905 Tm
1 0 0 sc
-0.0005 Tc
(f\(n\))Tj [-1384.39999 ]TJ (d\(n\))Tj 
-3.256 2.5556 TD
-0.0009 Tc
(L\(n\)/r)Tj 
ET
3 w
154.44 520.55 m
115.56 520.55 l
S 
115.92 527.39101 m
102.36 520.67101 l
115.92 513.83099 l
f* 
0.96001 w
128.39999 317.271 m
128.39999 468.951 l
S 
124.2 317.631 m
128.52 309.231 l
132.72 317.631 l
f* 
132.72 468.711 m
128.52 477.231 l
124.2 468.711 l
f* 
0.918 0.918 0.918 sc
134.88 120.11099 19.56 -63 rf
0 0 0 SC
134.88 57.11099 m
134.88 120.11099 l
154.44 57.11099 m
154.44 120.11099 l
134.88 120.11099 m
154.44 120.11099 l
S 
1 0 0 SC
141.36 310.791 m
167.39999 310.791 l
S 
0 0 0 SC
154.44 57.11099 m
154.44 797.87 l
S 
0 0 0 sc
158.75999 797.63 m
154.44 806.03101 l
150.24001 797.63 l
f* 
141.36 120.11099 m
167.39999 120.11099 l
141.36 197.03101 m
167.39999 197.03101 l
S 
BT
0 27.015 -27 0 184.2 79.1906 Tm
-0.00079 Tc
(f\(n-1\))Tj [-416.39999 ]TJ (d\(n-1\))Tj 
1 0 0 sc
6.73849 0 TD
-0.0004 Tc
(a\(n\))Tj 
ET
1 0 0 SC
3 w
141.24001 310.791 m
102.36 310.791 l
S 
141 304.071 m
154.44 310.911 l
141 317.631 l
f* 
0.60001 0.60001 0.60001 SC
154.44 197.03101 m
115.56 197.03101 l
S 
0.60001 0.60001 0.60001 sc
115.92 203.871 m
102.36 197.151 l
115.92 190.311 l
f* 
1 0.537 0.537 sc
0 0 0 SC
1 J
0 j
0.96001 w
284.39999 379.071 19.56 168 re
B* 
1 0 0 SC
0 J
1 j
258.36 547.07001 m
316.92 547.07001 l
290.88 590.87 m
316.92 590.87 l
S 
BT
0 27.015 -27 0 333.72 506.8705 Tm
1 0 0 sc
-0.0005 Tc
(f\(n\))Tj [-1380 ]TJ (d\(n\))Tj 
-3.26041 3.28 TD
-0.0009 Tc
(L\(n\)/r)Tj 
ET
3 w
303.96001 590.50999 m
265.08 590.50999 l
S 
265.44 597.351 m
251.88 590.50999 l
265.44 583.791 l
f* 
0.96001 w
264.96001 387.231 m
264.96001 538.911 l
S 
260.75999 387.591 m
265.08 379.071 l
269.28 387.591 l
f* 
269.28 538.67101 m
265.08 547.07001 l
260.75999 538.67101 l
f* 
0.918 0.918 0.918 sc
0 0 0 SC
1 J
0 j
440.39999 225.11099 19.56 153.96001 re
B* 
0.60001 0.60001 0.60001 SC
0 J
1 j
3 w
459.96001 274.071 m
421.08 274.071 l
S 
0.60001 0.60001 0.60001 sc
421.44 280.911 m
407.88 274.19099 l
421.44 267.351 l
f* 
0 0 0 SC
0.96001 w
459.96001 57.11099 m
459.96001 797.87 l
S 
0 0 0 sc
464.28 797.63 m
459.96001 806.03101 l
455.75999 797.63 l
f* 
446.88 379.071 m
472.92 379.071 l
S 
1 0 0 SC
446.88 237.47099 m
472.92 237.47099 l
S 
0 0 0 SC
446.88 274.071 m
472.92 274.071 l
S 
BT
0 27.015 -27 0 489.72 324.2305 Tm
(f\(n-1\))Tj 
-3.17599 0 TD
-0.00079 Tc
(d\(n-1\))Tj 
1 0 0 sc
-1.8745 0 TD
-0.0004 Tc
(a\(n\))Tj 
ET
1 0 0 SC
3 w
446.75999 239.03101 m
407.88 239.03101 l
S 
446.52 232.311 m
459.96001 239.151 l
446.52 245.871 l
f* 
1 0.537 0.537 sc
0 0 0 SC
1 J
0 j
0.96001 w
420.96001 274.071 19.44 168 re
B* 
1 0 0 SC
0 J
1 j
414.36 442.071 m
472.92 442.071 l
446.88 485.871 m
472.92 485.871 l
S 
BT
0 27.015 -27 0 489.72 415.19051 Tm
1 0 0 sc
-0.0005 Tc
(f\(n\))Tj [-886.89999 ]TJ (d\(n\))Tj 
-3.75349 3.28 TD
-0.0009 Tc
(L\(n\)/r)Tj 
ET
3 w
459.96001 485.511 m
421.08 485.511 l
S 
421.44 492.35001 m
407.88 485.631 l
421.44 478.791 l
f* 
0.96001 w
414.36 282.231 m
414.36 433.911 l
S 
410.16 282.591 m
414.36 274.19099 l
418.67999 282.591 l
f* 
418.67999 433.67101 m
414.36 442.19099 l
410.16 433.67101 l
f* 
BT
0 33.9792 -33.96001 0 60.24001 78.2305 Tm
0.8 0.8 0.8 sc
-0.0002 Tc
0.0016 Tw
(f\(n\) = max{a\(n\), min[d\(n-1\), f\(n-1\)]}+ L\(n\)/r)Tj 
ET
23.88 775.19099 46.92 -705.12 rf
0.83501 0.914 1 sc
17.88 769.19099 46.92 -705.12 rf
BT
0 33.9792 -33.96001 0 54.24001 72.2305 Tm
0 0 0 sc
(f\(n\) = max{a\(n\), min[d\(n-1\), f\(n-1\)]}+ L\(n\)/r)Tj 
ET
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
